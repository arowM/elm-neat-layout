.elmNeatLayout {
  $prefix: &;
  $variable: elmneatlayout;
  $top: #{$prefix}--top;
  $boundary: #{$prefix}--boundary;
  $boundaryChild: #{$prefix}--boundaryChild;
  $row: #{$prefix}--row;
  $rowChild: #{$prefix}--rowChild;
  $rowBoundary: #{$prefix}--rowBoundary;
  $column: #{$prefix}--column;
  $columnChild: #{$prefix}--columnChild;
  $columnBoundary: #{$prefix}--columnBoundary;
  $textView: #{$prefix}--textView;
  $heightFlex: #{$prefix}--heightFlex;
  $heightMinSize: #{$prefix}--heightMinSize;
  $widthFlex: #{$prefix}--widthFlex;
  $widthMinSize: #{$prefix}--widthMinSize;

  &,
  &::before,
  &::after {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  &--top {
    display: block;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    overflow: hidden;
  }

  &--overlay {
    display: block;
    position: absolute;
    pointer-events: none;
    top: var(--#{$variable}--overlay-top);
    bottom: var(--#{$variable}--overlay-bottom);
    left: var(--#{$variable}--overlay-left);
    right: var(--#{$variable}--overlay-right);
    z-index: var(--#{$variable}--overlay-priority);
    overflow: hidden;
  }

  &--boundary {
    &_content {
      display: flex;
      flex-direction: row;
      align-items: stretch;
      overflow-x: clip;
      overflow-y: visible;
      padding: var(--#{$variable}--inner-gap-y) var(--#{$variable}--inner-gap-x);
    }

    &-hasMaxHeight {
      max-height: var(--#{$variable}--max-height);
    }

    &-hasMaxWidth {
      max-width: var(--#{$variable}--max-width);
    }

    &-hasMinHeight {
      min-height: var(--#{$variable}--min-height);
    }

    &-hasMinWidth {
      min-width: var(--#{$variable}--min-width);
    }

    &-hasOverlays:not(#{$top}) {
      position: relative;
    }

    &-enforcePointerEvent {
      pointer-events: auto;
    }

    // wrapper
    &:not(#{$boundary}_content) {
      display: flex;
      flex-direction: row;
      align-items: stretch;

      & > #{$boundary}_content {
        flex-grow: 1;
        height: auto;
      }
    }

    &#{$rowChild} {
      flex-shrink: 1;
      width: auto;

      &#{$heightMinSize} {
        height: auto;
      }

      &#{$heightFlex} {
        height: 100%;

        &#{$rowChild}-alignStretch {
          height: auto;
        }
      }
    }

    &#{$columnChild} {
      flex-shrink: 1;
      height: auto;

      &#{$widthMinSize} {
        width: auto;
      }

      &#{$widthFlex} {
        width: 100%;

        &#{$columnChild}-alignStretch {
          width: auto;
        }
      }
    }
  }

  &--boundaryChild {
    display: block;
    width: 100%;
    height: auto;
    flex-grow: 1;
    flex-shrink: 1;
  }

  &--rowBoundary {
    &_content {
      overflow: hidden;
      flex-flow: row nowrap;
      display: flex;
    }

    &-wrap {
      flex-wrap: wrap;
    }

    &-justifyStart {
      justify-content: flex-start;
    }

    &-justifyCenter {
      justify-content: center;
    }

    &-justifyEnd {
      justify-content: flex-end;
    }

    &-hasMaxHeight {
      max-height: var(--#{$variable}--max-height);
    }

    &-hasMaxWidth {
      max-width: var(--#{$variable}--max-width);
    }

    &-hasMinHeight {
      min-height: var(--#{$variable}--min-height);
    }

    &-hasMinWidth {
      min-width: var(--#{$variable}--min-width);
    }

    &-hasOverlays:not(#{$top}) {
      position: relative;
    }

    &-enforcePointerEvent {
      pointer-events: auto;
    }

    // wrapper
    &:not(#{$rowBoundary}_content) {
      display: flex;
      flex-direction: row;
      align-items: stretch;

      & > #{$rowBoundary}_content {
        flex-grow: 1;
        height: auto;
      }
    }

    &#{$rowChild} {
      flex-shrink: 1;

      &:not(#{$rowBoundary}-horizontalOverflow) {
        width: auto;
      }

      &#{$rowBoundary}-horizontalOverflow {
        &:not(#{$rowChild}-grow) {
          width: 0;
        }
        &#{$rowChild}-grow {
          width: auto;
        }
      }

      &#{$heightMinSize} {
        height: auto;
      }

      &#{$heightFlex} {
        height: 100%;

        &#{$rowChild}-alignStretch {
          height: auto;
        }
      }
    }

    &#{$columnChild} {
      height: auto;
      flex-shrink: 1;

      &#{$widthMinSize} {
        width: auto;
      }

      &#{$widthFlex} {
        width: 100%;

        &#{$columnChild}-alignStretch {
          width: auto;
        }
      }
    }

    &_content-horizontalOverflow {
      overflow-x: auto;
      overflow-y: hidden;

      & > #{$rowChild} {
        flex-shrink: 0;
      }
    }

    &_content > #{$rowChild} {
      flex-grow: 0;

      &-grow {
        flex-grow: 1;
      }

      &-alignStart {
        align-self: flex-start;
      }

      &-alignCenter {
        align-self: center;
      }

      &-alignEnd {
        align-self: flex-end;
      }

      &-alignStretch {
        align-self: stretch;
      }
    }
  }

  &--columnBoundary {
    &_content {
      overflow: hidden;
      flex-flow: column nowrap;
      display: flex;
    }

    &-justifyStart {
      justify-content: flex-start;
    }

    &-justifyCenter {
      justify-content: center;
    }

    &-justifyEnd {
      justify-content: flex-end;
    }

    &-hasMaxHeight {
      max-height: var(--#{$variable}--max-height);
    }

    &-hasMaxWidth {
      max-width: var(--#{$variable}--max-width);
    }

    &-hasMinHeight {
      min-height: var(--#{$variable}--min-height);
    }

    &-hasMinWidth {
      min-width: var(--#{$variable}--min-width);
    }

    &-hasOverlays:not(#{$top}) {
      position: relative;
    }

    &-enforcePointerEvent {
      pointer-events: auto;
    }

    // wrapper
    &:not(#{$columnBoundary}_content) {
      display: flex;
      flex-direction: row;
      align-items: stretch;

      & > #{$columnBoundary}_content {
        flex-grow: 1;
        height: auto;
      }
    }

    &#{$rowChild} {
      width: auto;
      flex-shrink: 1;

      &#{$heightMinSize} {
        height: auto;
      }

      &#{$heightFlex} {
        height: 100%;

        &#{$rowChild}-alignStretch {
          height: auto;
        }
      }
    }

    &#{$columnChild} {
      flex-shrink: 1;

      &:not(#{$columnBoundary}-verticalOverflow) {
        height: auto;
      }

      &#{$columnBoundary}-verticalOverflow {
        &:not(#{$columnChild}-grow) {
          height: 0;
        }
        &:not(#{$columnBoundary}_content) {
          overflow-y: hidden;
        }
        &#{$columnChild}-grow {
          height: 100%;
        }
      }

      &#{$widthMinSize} {
        width: auto;
      }

      &#{$widthFlex} {
        width: 100%;

        &#{$columnChild}-alignStretch {
          width: auto;
        }
      }
    }

    &_content-verticalOverflow {
      overflow-y: auto;
      overflow-x: hidden;

      & > #{$columnChild} {
        flex-shrink: 0;
      }
    }

    &_content > #{$columnChild} {
      flex-grow: 0;

      &-grow {
        flex-grow: 1;
      }

      &-alignStart {
        align-self: flex-start;
      }

      &-alignCenter {
        align-self: center;
      }

      &-alignEnd {
        align-self: flex-end;
      }

      &-alignStretch {
        align-self: stretch;
      }
    }
  }

  &--row {
    flex-flow: row nowrap;
    display: flex;
    gap: var(--#{$variable}--content-gap-y) var(--#{$variable}--content-gap-x);

    &-wrap {
      flex-wrap: wrap;
    }

    &-justifyStart {
      justify-content: flex-start;
    }

    &-justifyCenter {
      justify-content: center;
    }

    &-justifyEnd {
      justify-content: flex-end;
    }

    & > #{$rowChild} {
      flex-grow: 0;
      flex-shrink: 1;

      &#{$rowChild}-grow {
        flex-grow: 1;
      }

      &#{$rowChild}-alignStart {
        align-self: flex-start;
      }

      &#{$rowChild}-alignCenter {
        align-self: center;
      }

      &#{$rowChild}-alignEnd {
        align-self: flex-end;
      }

      &#{$rowChild}-alignStretch {
        align-self: stretch;
      }
    }

    &#{$rowChild} {
      flex-shrink: 1;
      width: auto;
      height: auto;
    }

    &#{$columnChild} {
      flex-shrink: 1;
      height: auto;
      width: 100%;

      &#{$columnChild}-alignStretch {
        width: auto;
      }
    }
  }

  &--column {
    flex-flow: column nowrap;
    display: flex;
    gap: var(--#{$variable}--content-gap-y) var(--#{$variable}--content-gap-x);

    &-justifyStart {
      justify-content: flex-start;
    }

    &-justifyCenter {
      justify-content: center;
    }

    &-justifyEnd {
      justify-content: flex-end;
    }

    & > #{$columnChild} {
      flex-grow: 0;
      flex-shrink: 1;

      &#{$columnChild}-grow {
        flex-grow: 1;
      }

      &#{$columnChild}-alignStart {
        align-self: flex-start;
      }
      &#{$columnChild}-alignCenter {
        align-self: center;
      }
      &#{$columnChild}-alignEnd {
        align-self: flex-end;
      }
      &#{$columnChild}-alignStretch {
        align-self: stretch;
      }
    }

    &#{$rowChild} {
      flex-shrink: 1;
      width: auto;
      height: 100%;

      &#{$rowChild}-alignStretch {
        height: auto;
      }
    }

    &#{$columnChild} {
      flex-shrink: 1;
      height: auto;
      width: auto;
    }
  }

  &--textView {
    display: block;
    overflow-x: clip;
    overflow-y: visible;
    margin: calc(var(--#{$variable}--content-gap-y) / -2) 0;
  }

  &--textView, &--textBoundary {
    line-height: calc(1em + var(--#{$variable}--content-gap-y));
  }

  &--flows {
    &-justifyStart {
      text-align: start;
    }

    &-justifyCenter {
      text-align: center;
    }

    &-justifyEnd {
      text-align: end;
    }

    &-ellipsis {
      text-overflow: ellipsis;
    }

    $parent: &;
    &:not(#{$parent}-nowrap) {
      &:not(#{$parent}-preserveWhiteSpace) {
        white-space: normal;
      }
      &#{$parent}-preserveWhiteSpace {
        white-space: break-spaces;
      }
    }

    &-nowrap {
      &:not(#{$parent}-preserveWhiteSpace) {
        white-space: nowrap;
      }
      &#{$parent}-preserveWhiteSpace {
        white-space: pre;
      }
    }
  }

  &--inline {
    display: inline;
    line-height: calc(1em + var(--#{$variable}--content-gap-y));
  }
}
